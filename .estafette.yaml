builder:
  track: dev

labels:
  app-group: estafette-ci-extensions
  team: estafette-team
  language: golang

version:
  semver:
    major: 0
    minor: 1

stages:
  build:
    image: golang:1.16.0-alpine
    env:
      CGO_ENABLED: 0
      GOOS: linux
    commands:
    - go test ./...
    - go build -a -installsuffix cgo -ldflags "-X main.appgroup=${ESTAFETTE_LABEL_APP_GROUP} -X main.app=${ESTAFETTE_GIT_NAME} -X main.version=${ESTAFETTE_BUILD_VERSION} -X main.revision=${ESTAFETTE_GIT_REVISION} -X main.branch=${ESTAFETTE_GIT_BRANCH} -X main.buildDate=${ESTAFETTE_BUILD_DATETIME}" -o ./publish/${ESTAFETTE_GIT_NAME} .

  bake:
    image: extensions/docker:stable
    action: build
    container: docker
    inline: |
      FROM alpine:3.13

      ARG DIVE_VERSION=0.10.0

      RUN wget -O- https://github.com/wagoodman/dive/releases/download/v${DIVE_VERSION}/dive_${DIVE_VERSION}_linux_amd64.tar.gz | \
          tar -xzf - -C / \
          && /dive version

      ARG TRIVY_VERSION=0.18.2

      RUN wget -O- https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz | \
          tar -xzf - -C / \
          && /trivy --version \
          && /trivy --cache-dir /trivy-cache image --light --no-progress --download-db-only \
          && /trivy --cache-dir /trivy-cache image --severity CRITICAL --light --skip-update --no-progress --ignore-unfixed alpine:3.11

      FROM scratch

      LABEL maintainer="estafette.io"

      COPY ${ESTAFETTE_GIT_NAME} /
      COPY ca-certificates.crt /etc/ssl/certs/
      COPY --from=0 /dive /dive
      COPY --from=0 /trivy /trivy
      COPY --from=0 /trivy-cache /trivy-cache
      COPY --from=0 /tmp /tmp

      ENV PATH="/dod:$PATH" \
          ESTAFETTE_LOG_FORMAT="console" \
          BUILDKIT_PROGRESS="plain"

      ENTRYPOINT ["/${ESTAFETTE_GIT_NAME}"]
    repositories:
    - extensions
    path: ./publish
    dontExpand:
    - DIVE_VERSION
    - TRIVY_VERSION
    copy:
    - /etc/ssl/certs/ca-certificates.crt

  check-container:
    parallelStages:
      check-efficiency:
        image: extensions/docker:stable
        action: dive
        container: docker
        repositories:
        - extensions

      vulnerability-scan:
        image: extensions/docker:stable
        action: trivy
        container: docker
        repositories:
        - extensions

  tests:
    parallelStages:
      test-build:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: build
        container: docker-test
        inline: |
          FROM docker:19.03.13

          RUN apk update \
              && apk add --no-cache --upgrade \
                  git \
              && rm -rf /var/cache/apk/* \
              && git version

          LABEL maintainer="estafette.io"

          COPY ${ESTAFETTE_GIT_NAME} /
          COPY ca-certificates.crt /etc/ssl/certs/

          ENTRYPOINT ["/${ESTAFETTE_GIT_NAME}"]
        repositories:
        - extensions
        path: ./publish
        copy:
        - /etc/ssl/certs/ca-certificates.crt

      test-multistage-build:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: build
        container: docker-test
        inline: |
          FROM docker:19.03.13 AS builder

          RUN apk update \
              && apk add --no-cache --upgrade \
                  git \
              && rm -rf /var/cache/apk/* \
              && git version

          COPY . .

          RUN go build

          FROM docker:19.03.13 AS runtime

          LABEL maintainer="estafette.io"

          COPY --from=0 /estafette-work/${ESTAFETTE_GIT_NAME} /
          COPY ca-certificates.crt /etc/ssl/certs/

          ENTRYPOINT ["/${ESTAFETTE_GIT_NAME}"]
        repositories:
        - extensions
        path: ./publish-2
        copy:
        - /etc/ssl/certs/ca-certificates.crt

      test-build-from-private-registry:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: build
        no-cache: true
        container: hugo-test
        inline: |
          FROM estafette/hugo:0.62.2

          COPY ca-certificates.crt /etc/ssl/certs/
          COPY publish /publish
        repositories:
        - extensions
        path: ./publish-hugo
        copy:
        - /etc/ssl/certs/ca-certificates.crt
        - publish

      test-history:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: history
        container: docker
        tag: latest

      test-history-self:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: history
        container: docker
        tag: ${ESTAFETTE_BUILD_VERSION}
        repositories:
        - extensions

      test-dive:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: dive
        container: docker
        repositories:
        - extensions

      test-trivy:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: trivy
        container: docker
        repositories:
        - extensions

  push-to-docker-hub:
    image: extensions/docker:stable
    action: push
    container: docker
    repositories:
    - extensions

  slack-notify:
    image: extensions/slack-build-status:dev
    workspace: estafette
    channels:
    - '#build-status'
    when:
      status == 'succeeded' ||
      status == 'failed'

releases:
  dev:
    triggers:
    - pipeline:
        name: self
        branch: .+
    stages:
      tag-container-image:
        image: extensions/docker:stable
        action: tag
        container: docker
        repositories:
        - extensions
        tags:
        - dev

  beta:
    stages:
      tag-container-image:
        image: extensions/docker:stable
        action: tag
        container: docker
        repositories:
        - extensions
        tags:
        - beta

      slack-notify:
        image: extensions/slack-build-status:dev
        workspace: estafette
        channels:
        - '#build-status'
        when:
          status == 'succeeded' ||
          status == 'failed'

  stable:
    stages:
      tag-container-image:
        image: extensions/docker:stable
        action: tag
        container: docker
        repositories:
        - extensions
        tags:
        - stable
        - latest

      slack-notify:
        image: extensions/slack-build-status:dev
        workspace: estafette
        channels:
        - '#build-status'
        when:
          status == 'succeeded' ||
          status == 'failed'

  nanoserver-1809-dev:
    builder:
      os: windows
      track: nanoserver-1809-dev
    triggers:
    - pipeline:
        name: self
        branch: .+
    clone: true
    stages:
      build:
        image: estafette/golang:1.16.0-nanoserver-1809
        shell: cmd
        env:
          CGO_ENABLED: 0
          GOOS: windows
          GOARCH: amd64
        commands:
        - go build -v -ldflags "-X main.app=%ESTAFETTE_GIT_NAME% -X main.version=%ESTAFETTE_BUILD_VERSION% -X main.revision=%ESTAFETTE_GIT_REVISION% -X main.branch=%ESTAFETTE_GIT_BRANCH% -X main.buildDate=%ESTAFETTE_BUILD_DATETIME%" -o ./publish/%ESTAFETTE_GIT_NAME%.exe

      bake:
        image: extensions/docker:nanoserver-1809-stable
        action: build
        no-cache: true
        expand-variables: false
        container: docker
        repositories:
        - extensions
        dockerfile: Dockerfile.nanoserver-1809
        path: ./publish

      test:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: build
        container: docker-test
        versionTagSuffix: -suffix
        inline: |
          FROM mcr.microsoft.com/windows/nanoserver:1809

          RUN netsh interface ipv4 show interfaces
        repositories:
        - extensions

      check-efficiency:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: dive
        container: docker
        repositories:
        - extensions

      push-to-docker-hub:
        image: extensions/docker:nanoserver-1809-stable
        action: push
        container: docker
        repositories:
        - extensions
        tags:
        - nanoserver-1809-dev
        pushVersionTag: false

  nanoserver-1809-beta:
    builder:
      os: windows
      track: nanoserver-1809-dev
    clone: true
    stages:
      build:
        image: estafette/golang:1.16.0-nanoserver-1809
        shell: cmd
        env:
          CGO_ENABLED: 0
          GOOS: windows
          GOARCH: amd64
        commands:
        - go build -v -ldflags "-X main.app=%ESTAFETTE_GIT_NAME% -X main.version=%ESTAFETTE_BUILD_VERSION% -X main.revision=%ESTAFETTE_GIT_REVISION% -X main.branch=%ESTAFETTE_GIT_BRANCH% -X main.buildDate=%ESTAFETTE_BUILD_DATETIME%" -o ./publish/%ESTAFETTE_GIT_NAME%.exe

      bake:
        image: extensions/docker:nanoserver-1809-dev
        action: build
        no-cache: true
        expand-variables: false
        container: docker
        repositories:
        - extensions
        dockerfile: Dockerfile.nanoserver-1809
        path: ./publish

      test:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: build
        container: docker-test
        versionTagSuffix: -suffix
        inline: |
          FROM mcr.microsoft.com/windows/nanoserver:1809

          RUN netsh interface ipv4 show interfaces
        repositories:
        - extensions

      push-to-docker-hub:
        image: extensions/docker:nanoserver-1809-dev
        action: push
        container: docker
        repositories:
        - extensions
        tags:
        - nanoserver-1809-beta
        pushVersionTag: false

  nanoserver-1809-stable:
    builder:
      os: windows
      track: nanoserver-1809-dev
    clone: true
    stages:
      build:
        image: estafette/golang:1.16.0-nanoserver-1809
        shell: cmd
        env:
          CGO_ENABLED: 0
          GOOS: windows
          GOARCH: amd64
        commands:
        - go build -v -ldflags "-X main.app=%ESTAFETTE_GIT_NAME% -X main.version=%ESTAFETTE_BUILD_VERSION% -X main.revision=%ESTAFETTE_GIT_REVISION% -X main.branch=%ESTAFETTE_GIT_BRANCH% -X main.buildDate=%ESTAFETTE_BUILD_DATETIME%" -o ./publish/%ESTAFETTE_GIT_NAME%.exe

      bake:
        image: extensions/docker:nanoserver-1809-stable
        action: build
        no-cache: true
        expand-variables: false
        container: docker
        repositories:
        - extensions
        dockerfile: Dockerfile.nanoserver-1809
        path: ./publish

      test:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: build
        container: docker-test
        versionTagSuffix: -suffix
        inline: |
          FROM mcr.microsoft.com/windows/nanoserver:1809

          RUN netsh interface ipv4 show interfaces
        repositories:
        - extensions

      push-to-docker-hub:
        image: extensions/docker:nanoserver-1809-stable
        action: push
        container: docker
        repositories:
        - extensions
        tags:
        - nanoserver-1809-stable
        pushVersionTag: false