builder:
  track: dev

labels:
  app-group: estafette-ci-extensions
  team: estafette-team
  language: golang

version:
  semver:
    major: 0
    minor: 1

stages:
  build-and-lint:
    parallelStages:
      build:
        image: golang:1.18-alpine
        env:
          CGO_ENABLED: 0
          GOOS: linux
        commands:
        - go test ./...
        - go build -a -installsuffix cgo -ldflags "-X main.appgroup=${ESTAFETTE_LABEL_APP_GROUP} -X main.app=${ESTAFETTE_GIT_NAME} -X main.version=${ESTAFETTE_BUILD_VERSION} -X main.revision=${ESTAFETTE_GIT_REVISION} -X main.branch=${ESTAFETTE_GIT_BRANCH} -X main.buildDate=${ESTAFETTE_BUILD_DATETIME}" -o ./publish/${ESTAFETTE_GIT_NAME} .

      lint:
        image: golangci/golangci-lint:latest-alpine
        commands:
        - golangci-lint run --timeout 3m

  bake:
    image: extensions/docker:stable
    action: build
    container: docker
    severity: critical
    repositories:
    - extensions
    path: ./publish
    expandVariables: false

  tests:
    parallelStages:
      test-build:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: build
        container: docker-test
        severity: critical
        noCachePush: true
        inline: |
          FROM docker:latest

          RUN apk update \
              && apk add --no-cache --upgrade \
                  git \
              && rm -rf /var/cache/apk/* \
              && git version

          LABEL maintainer="estafette.io"

          COPY ${ESTAFETTE_GIT_NAME} /
          COPY ca-certificates.crt /etc/ssl/certs/

          ENTRYPOINT ["/${ESTAFETTE_GIT_NAME}"]
        repositories:
        - extensions
        path: ./publish
        copy:
        - /etc/ssl/certs/ca-certificates.crt

      test-multistage-build:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: build
        container: docker-test-2
        noCachePush: true
        severity: critical
        inline: |
          FROM golang:1.18-alpine AS builder

          RUN apk update \
              && apk add --no-cache --upgrade \
                  git \
              && rm -rf /var/cache/apk/* \
              && git version

          FROM golang:1.18-alpine

          LABEL maintainer="estafette.io"

          COPY ca-certificates.crt /etc/ssl/certs/

          ENTRYPOINT ["/${ESTAFETTE_GIT_NAME}"]
        repositories:
        - extensions
        path: ./publish-2
        copy:
        - /etc/ssl/certs/ca-certificates.crt

      test-build-from-private-registry:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: build
        no-cache: true
        severity: critical
        container: hugo-test
        inline: |
          FROM extensions/docker:dev
          RUN rm -rf google-cloud-sdk/bin/anthoscli && \
              apk -U upgrade &&  \
              rm -rf /var/cache/apk/* 

          COPY ca-certificates.crt /etc/ssl/certs/
          COPY publish /publish
          COPY .trivyignore /.trivyignore
        repositories:
        - extensions
        path: ./publish-hugo
        copy:
        - /etc/ssl/certs/ca-certificates.crt
        - publish
        - .trivyignore

      test-history:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: history
        container: docker
        tag: latest

      test-history-self:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: history
        container: docker
        tag: ${ESTAFETTE_BUILD_VERSION}
        repositories:
        - extensions

  push-to-docker-hub:
    image: extensions/docker:stable
    action: push
    container: docker
    repositories:
    - extensions

  slack-notify:
    image: extensions/slack-build-status:dev
    workspace: estafette
    channels:
    - '#build-status'
    when:
      status == 'succeeded' ||
      status == 'failed'

releases:
  dev:
    triggers:
    - pipeline:
        name: self
        branch: .+
    stages:
      tag-container-image:
        image: extensions/docker:stable
        action: tag
        container: docker
        repositories:
        - extensions
        tags:
        - dev

  beta:
    stages:
      tag-container-image:
        image: extensions/docker:stable
        action: tag
        container: docker
        repositories:
        - extensions
        tags:
        - beta

      slack-notify:
        image: extensions/slack-build-status:dev
        workspace: estafette
        channels:
        - '#build-status'
        when:
          status == 'succeeded' ||
          status == 'failed'

  stable:
    clone: true
    stages:
      build:
        image: golang:1.18-alpine
        env:
          CGO_ENABLED: 0
          GOOS: linux
        commands:
        - go test ./...
        - go build -a -installsuffix cgo -ldflags "-X main.appgroup=${ESTAFETTE_LABEL_APP_GROUP} -X main.app=${ESTAFETTE_GIT_NAME} -X main.version=${ESTAFETTE_BUILD_VERSION} -X main.revision=${ESTAFETTE_GIT_REVISION} -X main.branch=${ESTAFETTE_GIT_BRANCH} -X main.buildDate=${ESTAFETTE_BUILD_DATETIME}" -o ./publish/${ESTAFETTE_GIT_NAME} .

      bake:
        image: extensions/docker:stable
        action: build
        container: docker
        repositories:
        - extensions
        path: ./publish
        expandVariables: false

      push-to-docker-hub:
        image: extensions/docker:stable
        action: push
        container: docker
        pushVersionTag: false
        repositories:
        - extensions
        tags:
        - stable
        - latest

      slack-notify:
        image: extensions/slack-build-status:dev
        workspace: estafette
        channels:
        - '#build-status'
        when:
          status == 'succeeded' ||
          status == 'failed'

  nanoserver-1809-dev:
    builder:
      os: windows
      track: nanoserver-1809-dev
    # triggers:
    # - pipeline:
    #     name: self
    #     branch: .+
    clone: true
    stages:
      build:
        image: estafette/golang:1.16.0-nanoserver-1809
        shell: cmd
        env:
          CGO_ENABLED: 0
          GOOS: windows
          GOARCH: amd64
        commands:
        - go build -v -ldflags "-X main.app=%ESTAFETTE_GIT_NAME% -X main.version=%ESTAFETTE_BUILD_VERSION% -X main.revision=%ESTAFETTE_GIT_REVISION% -X main.branch=%ESTAFETTE_GIT_BRANCH% -X main.buildDate=%ESTAFETTE_BUILD_DATETIME%" -o ./publish/%ESTAFETTE_GIT_NAME%.exe

      bake:
        image: extensions/docker:nanoserver-1809-stable
        action: build
        no-cache: true
        expand-variables: false
        container: docker
        repositories:
        - extensions
        dockerfile: Dockerfile.nanoserver-1809
        path: ./publish

      test:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: build
        container: docker-test
        versionTagSuffix: -suffix
        inline: |
          FROM mcr.microsoft.com/windows/nanoserver:1809

          RUN netsh interface ipv4 show interfaces
        repositories:
        - extensions

      push-to-docker-hub:
        image: extensions/docker:nanoserver-1809-stable
        action: push
        container: docker
        repositories:
        - extensions
        tags:
        - nanoserver-1809-dev
        pushVersionTag: false

  nanoserver-1809-beta:
    builder:
      os: windows
      track: nanoserver-1809-dev
    clone: true
    stages:
      build:
        image: estafette/golang:1.16.0-nanoserver-1809
        shell: cmd
        env:
          CGO_ENABLED: 0
          GOOS: windows
          GOARCH: amd64
        commands:
        - go build -v -ldflags "-X main.app=%ESTAFETTE_GIT_NAME% -X main.version=%ESTAFETTE_BUILD_VERSION% -X main.revision=%ESTAFETTE_GIT_REVISION% -X main.branch=%ESTAFETTE_GIT_BRANCH% -X main.buildDate=%ESTAFETTE_BUILD_DATETIME%" -o ./publish/%ESTAFETTE_GIT_NAME%.exe

      bake:
        image: extensions/docker:nanoserver-1809-dev
        action: build
        no-cache: true
        expand-variables: false
        container: docker
        repositories:
        - extensions
        dockerfile: Dockerfile.nanoserver-1809
        path: ./publish

      test:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: build
        container: docker-test
        versionTagSuffix: -suffix
        inline: |
          FROM mcr.microsoft.com/windows/nanoserver:1809

          RUN netsh interface ipv4 show interfaces
        repositories:
        - extensions

      push-to-docker-hub:
        image: extensions/docker:nanoserver-1809-dev
        action: push
        container: docker
        repositories:
        - extensions
        tags:
        - nanoserver-1809-beta
        pushVersionTag: false

  nanoserver-1809-stable:
    builder:
      os: windows
      track: nanoserver-1809-dev
    clone: true
    stages:
      build:
        image: estafette/golang:1.16.0-nanoserver-1809
        shell: cmd
        env:
          CGO_ENABLED: 0
          GOOS: windows
          GOARCH: amd64
        commands:
        - go build -v -ldflags "-X main.app=%ESTAFETTE_GIT_NAME% -X main.version=%ESTAFETTE_BUILD_VERSION% -X main.revision=%ESTAFETTE_GIT_REVISION% -X main.branch=%ESTAFETTE_GIT_BRANCH% -X main.buildDate=%ESTAFETTE_BUILD_DATETIME%" -o ./publish/%ESTAFETTE_GIT_NAME%.exe

      bake:
        image: extensions/docker:nanoserver-1809-stable
        action: build
        no-cache: true
        expand-variables: false
        container: docker
        repositories:
        - extensions
        dockerfile: Dockerfile.nanoserver-1809
        path: ./publish

      test:
        image: extensions/docker:${ESTAFETTE_BUILD_VERSION}
        action: build
        container: docker-test
        versionTagSuffix: -suffix
        inline: |
          FROM mcr.microsoft.com/windows/nanoserver:1809

          RUN netsh interface ipv4 show interfaces
        repositories:
        - extensions

      push-to-docker-hub:
        image: extensions/docker:nanoserver-1809-stable
        action: push
        container: docker
        repositories:
        - extensions
        tags:
        - nanoserver-1809-stable
        pushVersionTag: false
